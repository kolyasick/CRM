import prisma from "~/lib/prisma";
import { dateString } from "~/utils/dateString";

type Response = {
  results: {
    [key: string]: string;
  };
};

const BASES_TO_TRACK = [""];

export default defineNitroPlugin(async () => {
  const config = useRuntimeConfig();
  // async function getCounterPartiesFromAllBases() {
  //   let totalCreated = 0;

  //   for (const { apiName, inn } of BASES_TO_TRACK) {
  //     try {
  //       console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã ${apiName}...`);

  //       const data = await $fetch<any[]>(`${config.public.API_URL}/${apiName}/hs/hapi/v1/counteragent`);

  //       const transformed = data.map((c: any) => ({
  //         title: c.mainConteragentName,
  //         comment: c.comment,
  //         form: c.fizUr,
  //         inn: c.inn,
  //         kpp: c.kpp,
  //         ogrn: c.regNum,
  //         physicalAddress: c.contact["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"] ?? "",
  //         legalAddress: c.contact["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"] ?? null,
  //         isPhysicalAddressEq: c.contact["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"] === c.contact["–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"],
  //         mailAddress: c.contact["–ü–æ—á—Ç–æ–≤—ã–π_–∞–¥—Ä–µ—Å"] ?? "",
  //         isMailAddressEq: c.contact["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–∞–¥—Ä–µ—Å"] === c.contact["–ü–æ—á—Ç–æ–≤—ã–π_–∞–¥—Ä–µ—Å"],
  //         phone: c.contact["–¢–µ–ª–µ—Ñ–æ–Ω"] ?? "",
  //         email: c.contact["Email"] ?? "",
  //         isContractor: false,
  //         isAgreed: false,
  //         banckAccount: {
  //           title: c.bank_account.name,
  //           bik: c.bank_account.bik,
  //           accountNumber: c.bank_account.account,
  //           cAccount: c.bank_account.c_account,
  //           address: c.bank_account.address,
  //           city: c.bank_account.city,
  //         },
  //         counterparty_contact: {
  //           title: `${c.contact_person.last_name} ${c.contact_person.first_name} ${c.contact_person.third_name}`,
  //           position: c.contact_person.position,
  //           contact: `${c.contact_person.contact["–¢–µ–ª–µ—Ñ–æ–Ω_–º–æ–±–∏–ª—å–Ω—ã–π"] ?? ""}\n${c.contact_person.contact["Email"] ?? ""}`,
  //         },
  //       }));
  //       if (transformed) {
  //         const results = await prisma.$transaction(
  //           async (prisma) => {
  //             const createdCounterparties = [];
  //             for (const counterpartyData of transformed) {
  //               const isCPEXIST = await prisma.counterparty.findMany({
  //                 where: {
  //                   inn: counterpartyData.inn,
  //                 },
  //               });
  //               if (isCPEXIST.length <= 0) {
  //                 const bankAccount = counterpartyData.banckAccount.title
  //                   ? await prisma.bankAccount.create({
  //                       data: {
  //                         title: counterpartyData.banckAccount.title,
  //                         bik: counterpartyData.banckAccount.bik ?? null,
  //                         accountNumber: counterpartyData.banckAccount.accountNumber,
  //                         cAccount: counterpartyData.banckAccount.cAccount,
  //                         address: counterpartyData.banckAccount.address,
  //                         city: counterpartyData.banckAccount.city,
  //                       },
  //                     })
  //                   : null;
  //                 const counterparty = await prisma.counterparty.create({
  //                   data: {
  //                     title: counterpartyData.title,
  //                     comment: counterpartyData.comment,
  //                     form: counterpartyData.form,
  //                     inn: counterpartyData.inn,
  //                     kpp: counterpartyData.kpp,
  //                     ogrn: counterpartyData.ogrn ?? null,
  //                     physicalAddress: counterpartyData.physicalAddress,
  //                     legalAddress: counterpartyData.legalAddress,
  //                     isPhysicalAddressEq: counterpartyData.isPhysicalAddressEq,
  //                     mailAddress: counterpartyData.mailAddress,
  //                     isMailAddressEq: counterpartyData.isMailAddressEq,
  //                     phone: counterpartyData.phone,
  //                     email: counterpartyData.email,
  //                     isContractor: counterpartyData.isContractor,
  //                     isAgreed: true,
  //                     bankAccount: bankAccount ? { connect: { id: bankAccount.id } } : undefined,
  //                     id: generateRandomString(),
  //                     legalEntity: { connect: { inn } },
  //                   },
  //                 });
  //                 if (counterpartyData.counterparty_contact && counterpartyData.counterparty_contact.title) {
  //                   await prisma.counterparty_contact.create({
  //                     data: {
  //                       title: counterpartyData.counterparty_contact.title,
  //                       position: counterpartyData.counterparty_contact.position,
  //                       contact: counterpartyData.counterparty_contact.contact ?? "-",
  //                       counterparty_id: counterparty.id,
  //                     },
  //                   });
  //                 }
  //                 createdCounterparties.push(counterparty);
  //               }
  //             }
  //             console.log(`–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${createdCounterparties.length} –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤`);
  //             return createdCounterparties;
  //           },
  //           {
  //             timeout: 1200000,
  //           }
  //         );
  //       }
  //     } catch (error) {
  //       console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–∑—ã ${apiName}:`, error);
  //     }
  //   }

  //   console.log(`–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ ${totalCreated} –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –±–∞–∑`);
  // }

  // const trackPayments = async (baseName: string) => {
  //   try {
  //     const payments = await prisma.application.findMany({
  //       where: {
  //         isIncome: false,
  //         adminStatus: {
  //           title: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
  //         },
  //         isPayed: false,
  //         payStatus: { title: { not: "–û–ø–ª–∞—á–µ–Ω" } },
  //       },
  //       select: {
  //         id: true,
  //         accountDate: true,
  //         legalEntity: {
  //           select: {
  //             dbName: true,
  //           },
  //         },
  //       },
  //     });

  //     if (!payments.length || !payments.some((p) => p.legalEntity.dbName === baseName)) return;

  //     const response = await fetch(`${config.public.API_URL}/${baseName}/hs/hapi/v1/track-payments`, {
  //       method: "POST",
  //       body: JSON.stringify({
  //         payment_numbers: payments.map((p) => ({
  //           –ù–æ–º–µ—Ä: p.id.toString(),
  //           –î–∞—Ç–∞: dateString(new Date(p.accountDate)),
  //         })),
  //       }),
  //     });

  //     const result: Response = await response.json();
  //     for (const [id, status] of Object.entries(result.results)) {
  //       const app = await prisma.application.findUnique({
  //         where: {
  //           id: parseInt(id),
  //           legalEntity: {
  //             dbName: baseName,
  //           },
  //           payStatus: {
  //             title: {
  //               not: status,
  //             },
  //           },
  //         },
  //         select: {
  //           id: true,
  //           isPayed: true,
  //           title: true,
  //           sum: true,
  //           projects: {
  //             select: {
  //               project: {
  //                 select: {
  //                   manager: {
  //                     select: {
  //                       realEmail: true,
  //                     },
  //                   },
  //                 },
  //               },
  //             },
  //           },
  //         },
  //       });

  //       if (!app) continue;

  //       await prisma.application.update({
  //         where: {
  //           id: app.id,
  //         },
  //         data: {
  //           payStatus: {
  //             connectOrCreate: {
  //               where: {
  //                 title: status,
  //               },
  //               create: {
  //                 title: status,
  //               },
  //             },
  //           },
  //         },
  //         select: {
  //           sum: true,
  //         },
  //       });
  //       console.log(`[${baseName}] –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, result);

  //       if (status === "–û–ø–ª–∞—á–µ–Ω" && !app.isPayed) {
  //         await prisma.$transaction([
  //           prisma.application.update({
  //             where: { id: app.id },
  //             data: { isPayed: true, paymentDate: new Date() },
  //           }),

  //           prisma.primaryDocument.update({
  //             where: {
  //               applicationId: app.id,
  //             },
  //             data: {
  //               paymentDate: new Date(),
  //             },
  //           }),
  //         ]);

  //         const mailOptions = {
  //           from: '"–ú–∞–≥–Ω–∞—Ç MCRM" <m.sergeev@lightdigital.ru>',
  //           to: app.projects[0].project.manager.realEmail,
  //           subject: `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${app.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞`,
  //           text: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${app.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:\n   ‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞: http://localhost:1823/applications?id=${app.id}\n   ‚Ä¢ –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${config.public.APP_URL}/applications?id=${app.id}`,
  //           html: `
  //             <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
  //               <div style="text-align: center; margin-bottom: 20px;">
  //                 <h1 style="color: #27ae60; margin: 0; padding: 10px 0; border-bottom: 2px solid #27ae60;">
  //                   ‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  //                 </h1>
  //               </div>
                
  //               <div style="background: #d4edda; padding: 25px; border-radius: 8px; margin: 20px 0; text-align: center;">
  //                 <div style="font-size: 48px; margin-bottom: 15px;">üéâ</div>
  //                 <p style="font-size: 20px; color: #155724; margin: 0; font-weight: bold;">
  //                   –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${app.id}<br>
  //                   —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!
  //                 </p>
  //               </div>

  //               <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
  //                 <h3 style="color: #2980b9; margin-top: 0; text-align: center;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0;">
  //                   <p style="margin: 8px 0; color: #2c3e50;">
  //                     <strong>‚Ññ –∑–∞—è–≤–∫–∏:</strong> ${app.id}
  //                   </p>
  //                   ${app.title ? `<p style="margin: 8px 0; color: #2c3e50;"><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${app.title}</p>` : ""}
  //                   ${app.sum ? `<p style="margin: 8px 0; color: #2c3e50;"><strong>–°—É–º–º–∞:</strong> ${app.sum} —Ä—É–±.</p>` : ""}
  //                   <p style="margin: 8px 0; color: #2c3e50;">
  //                     <strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #27ae60; font-weight: bold;">‚úÖ –û–ø–ª–∞—á–µ–Ω–æ</span>
  //                   </p>
  //                 </div>
  //               </div>

  //               <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
  //                 <h3 style="color: #2980b9; margin-top: 0; text-align: center;">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É</h3>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #27ae60;">
  //                   <p style="margin: 12px 0; font-weight: bold; color: #2c3e50;">
  //                     üñ•Ô∏è –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞:
  //                   </p>
  //                   <p style="margin: 8px 0;">
  //                     <a href="http://localhost:1823/applications?id=${app.id}" 
  //                       style="color: #3498db; text-decoration: none; word-break: break-all; display: inline-block; padding: 8px 12px; background: #f8f9fa; border-radius: 4px;">
  //                       http://localhost:1823/applications?id=${app.id}
  //                     </a>
  //                   </p>
  //                 </div>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #27ae60;">
  //                   <p style="margin: 12px 0; font-weight: bold; color: #2c3e50;">
  //                     üåê –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:
  //                   </p>
  //                   <p style="margin: 8px 0;">
  //                     <a href="${config.public.APP_URL}/applications?id=${app.id}" 
  //                       style="color: #3498db; text-decoration: none; word-break: break-all; display: inline-block; padding: 8px 12px; background: #f8f9fa; border-radius: 4px;">
  //                       ${config.public.APP_URL}/applications?id=${app.id}
  //                     </a>
  //                   </p>
  //                 </div>
  //               </div>

  //               <div style="background: #d4edda; padding: 15px; border-radius: 6px; margin: 20px 0; text-align: center;">
  //                 <p style="color: #155724; margin: 0; font-weight: bold;">
  //                   üíº –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"
  //                 </p>
  //               </div>
  //             </div>`,
  //         };

  //         await $fetch("/api/mailer/send-mail", {
  //           method: "POST",
  //           body: { mailOptions },
  //         });
  //       }
  //     }
  //   } catch (error) {
  //     console.error(`[${baseName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π:`, error);
  //   }
  // };

  // const trackInvoices = async (baseName: string) => {
  //   try {
  //     const invoices = await prisma.application.findMany({
  //       where: {
  //         isIncome: true,
  //         adminStatus: {
  //           title: "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
  //         },
  //         isPayed: false,
  //         payStatus: { title: { not: "–û–ø–ª–∞—á–µ–Ω" } },
  //       },
  //       select: {
  //         id: true,
  //         accountDate: true,
  //         legalEntity: {
  //           select: {
  //             dbName: true,
  //           },
  //         },
  //       },
  //     });

  //     if (!invoices.length || !invoices.some((i) => i.legalEntity.dbName === baseName)) return;

  //     const response = await fetch(`${config.public.API_URL}/${baseName}/hs/hapi/v1/track-invoices`, {
  //       method: "POST",
  //       body: JSON.stringify({
  //         invoice_numbers: invoices.map((i) => ({
  //           –ù–æ–º–µ—Ä: i.id.toString(),
  //           –î–∞—Ç–∞: dateString(new Date(i.accountDate)),
  //         })),
  //       }),
  //     });

  //     const result: Response = await response.json();

  //     for (const [id, status] of Object.entries(result.results)) {
  //       const app = await prisma.application.findUnique({
  //         where: {
  //           id: parseInt(id),
  //           legalEntity: {
  //             dbName: baseName,
  //           },
  //           payStatus: {
  //             title: {
  //               not: status,
  //             },
  //           },
  //         },
  //         select: {
  //           id: true,
  //           isPayed: true,
  //           title: true,
  //           sum: true,
  //           projects: {
  //             select: {
  //               project: {
  //                 select: {
  //                   manager: {
  //                     select: {
  //                       realEmail: true,
  //                     },
  //                   },
  //                 },
  //               },
  //             },
  //           },
  //         },
  //       });

  //       if (!app) continue;

  //       const { sum } = await prisma.application.update({
  //         where: {
  //           id: app.id,
  //         },
  //         data: {
  //           payStatus: {
  //             connectOrCreate: {
  //               where: {
  //                 title: status,
  //               },
  //               create: {
  //                 title: status,
  //               },
  //             },
  //           },
  //         },
  //         select: {
  //           sum: true,
  //         },
  //       });
  //       console.log(`[${baseName}] –°—Ç–∞—Ç—É—Å—ã —Å—á–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, result);

  //       if (status === "–û–ø–ª–∞—á–µ–Ω" && !app.isPayed) {
  //         await prisma.$transaction([
  //           prisma.application.update({
  //             where: { id: app.id },
  //             data: { isPayed: true, accountDate: new Date() },
  //           }),
  //           prisma.project.updateMany({
  //             where: {
  //               applications: {
  //                 some: {
  //                   applicationId: parseInt(id),
  //                 },
  //               },
  //             },
  //             data: {
  //               payed_sum: {
  //                 increment: sum,
  //               },
  //             },
  //           }),
  //         ]);

  //         const mailOptions = {
  //           from: '"–ú–∞–≥–Ω–∞—Ç MCRM" <m.sergeev@lightdigital.ru>',
  //           to: app.projects[0].project.manager.realEmail,
  //           subject: `‚úÖ –í–∞—à —Å—á–µ—Ç ‚Ññ${app.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω`,
  //           text: `‚úÖ –í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${app.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:\n   ‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞: http://localhost:1823/applications?id=${app.id}\n   ‚Ä¢ –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${config.public.APP_URL}/applications?id=${app.id}`,
  //           html: `
  //             <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
  //               <div style="text-align: center; margin-bottom: 20px;">
  //                 <h1 style="color: #27ae60; margin: 0; padding: 10px 0; border-bottom: 2px solid #27ae60;">
  //                   ‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  //                 </h1>
  //               </div>
                
  //               <div style="background: #d4edda; padding: 25px; border-radius: 8px; margin: 20px 0; text-align: center;">
  //                 <div style="font-size: 48px; margin-bottom: 15px;">üéâ</div>
  //                 <p style="font-size: 20px; color: #155724; margin: 0; font-weight: bold;">
  //                   –í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${app.id}<br>
  //                   —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!
  //                 </p>
  //               </div>

  //               <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
  //                 <h3 style="color: #2980b9; margin-top: 0; text-align: center;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0;">
  //                   <p style="margin: 8px 0; color: #2c3e50;">
  //                     <strong>‚Ññ –∑–∞—è–≤–∫–∏:</strong> ${app.id}
  //                   </p>
  //                   ${app.title ? `<p style="margin: 8px 0; color: #2c3e50;"><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${app.title}</p>` : ""}
  //                   ${app.sum ? `<p style="margin: 8px 0; color: #2c3e50;"><strong>–°—É–º–º–∞:</strong> ${app.sum} —Ä—É–±.</p>` : ""}
  //                   <p style="margin: 8px 0; color: #2c3e50;">
  //                     <strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #27ae60; font-weight: bold;">‚úÖ –û–ø–ª–∞—á–µ–Ω–æ</span>
  //                   </p>
  //                 </div>
  //               </div>

  //               <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
  //                 <h3 style="color: #2980b9; margin-top: 0; text-align: center;">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É</h3>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #27ae60;">
  //                   <p style="margin: 12px 0; font-weight: bold; color: #2c3e50;">
  //                     üñ•Ô∏è –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞:
  //                   </p>
  //                   <p style="margin: 8px 0;">
  //                     <a href="http://localhost:1823/applications?id=${app.id}" 
  //                       style="color: #3498db; text-decoration: none; word-break: break-all; display: inline-block; padding: 8px 12px; background: #f8f9fa; border-radius: 4px;">
  //                       http://localhost:1823/applications?id=${app.id}
  //                     </a>
  //                   </p>
  //                 </div>
                  
  //                 <div style="background: white; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #27ae60;">
  //                   <p style="margin: 12px 0; font-weight: bold; color: #2c3e50;">
  //                     üåê –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:
  //                   </p>
  //                   <p style="margin: 8px 0;">
  //                     <a href="${config.public.APP_URL}/applications?id=${app.id}" 
  //                       style="color: #3498db; text-decoration: none; word-break: break-all; display: inline-block; padding: 8px 12px; background: #f8f9fa; border-radius: 4px;">
  //                       ${config.public.APP_URL}/applications?id=${app.id}
  //                     </a>
  //                   </p>
  //                 </div>
  //               </div>

  //               <div style="background: #d4edda; padding: 15px; border-radius: 6px; margin: 20px 0; text-align: center;">
  //                 <p style="color: #155724; margin: 0; font-weight: bold;">
  //                   üíº –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω–æ"
  //                 </p>
  //               </div>
  //             </div>`,
  //         };

  //         await $fetch("/api/mailer/send-mail", {
  //           method: "POST",
  //           body: { mailOptions },
  //         });
  //       }
  //     }
  //   } catch (error) {
  //     console.error(`[${baseName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–æ–≤:`, error);
  //   }
  // };

  // const trackPrimaryDocuments = async () => {
  //   try {
  //     const documents = await prisma.primaryDocument.findMany({
  //       where: {
  //         AND: [
  //           {
  //             isEmailed: false,
  //           },
  //           {
  //             status: {
  //               not: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
  //             },
  //           },
  //           {
  //             provisionDeadline: {
  //               gte: new Date(),
  //               lte: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
  //             },
  //           },
  //         ],
  //       },
  //       include: {
  //         manager: {
  //           select: {
  //             realEmail: true,
  //             full_name: true,
  //           },
  //         },
  //         project: {
  //           select: {
  //             title: true,
  //           },
  //         },
  //         legalEntity: {
  //           select: {
  //             title: true,
  //           },
  //         },
  //         counterParty: {
  //           select: {
  //             title: true,
  //           },
  //         },
  //       },
  //     });

  //     const documentsByManager = documents.reduce((acc, doc) => {
  //       if (doc.manager?.realEmail) {
  //         if (!acc[doc.manager.realEmail]) {
  //           acc[doc.manager.realEmail] = {
  //             manager: doc.manager,
  //             documents: [],
  //           };
  //         }
  //         acc[doc.manager.realEmail].documents.push(doc);
  //       }
  //       return acc;
  //     }, {} as { [email: string]: { manager: any; documents: any[] } });

  //     for (const [email, data] of Object.entries(documentsByManager)) {
  //       const managerData = data as { manager: any; documents: any[] };

  //       const documentList = managerData.documents
  //         .map(
  //           (doc) => `
  //             <tr>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${doc.invoiceNumber}</td>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${doc.project?.title || "–ù–µ —É–∫–∞–∑–∞–Ω"}</td>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${doc.counterParty?.title || "–ù–µ —É–∫–∞–∑–∞–Ω"}</td>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${doc.legalEntity?.title || "–ù–µ —É–∫–∞–∑–∞–Ω"}</td>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${new Date(doc.provisionDeadline).toLocaleDateString("ru-RU")}</td>
  //               <td style="padding: 8px; border: 1px solid #ddd;">${doc.amount ? `${doc.amount.toLocaleString("ru-RU")} —Ä—É–±.` : "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}</td>
  //             </tr>
  //           `
  //         )
  //         .join("");

  //       const mailOptions = {
  //         from: '"–ú–∞–≥–Ω–∞—Ç MCRM" <m.sergeev@lightdigital.ru>',
  //         to: email,
  //         subject: `‚è∞ –°—Ä–æ—á–Ω–æ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ ${managerData.documents.length} —Å—á–µ—Ç–∞–º`,
  //         text: `–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${managerData.manager.full_name}!

  //         –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—á–µ—Ç–∞–º (–¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è –∏–ª–∏ –º–µ–Ω–µ–µ):

  //         ${managerData.documents
  //           .map(
  //             (doc) =>
  //               `‚Ä¢ –°—á–µ—Ç ‚Ññ${doc.invoiceNumber} (${doc.project?.title || "–ü—Ä–æ–µ–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"}) - —Å—Ä–æ–∫ –¥–æ ${new Date(
  //                 doc.provisionDeadline
  //               ).toLocaleDateString("ru-RU")}`
  //           )
  //           .join("\n")}

  //         –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.`,

  //         html: `
  //           <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  //             <h2 style="color: #dc2626;">‚è∞ –°—Ä–æ—á–Ω–æ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã</h2>
              
  //             <p>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>${managerData.manager.full_name}</strong>,</p>
              
  //             <p>–ü–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—á–µ—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å <strong>–Ω–µ–¥–µ–ª—è –∏–ª–∏ –º–µ–Ω–µ–µ</strong>:</p>
              
  //             <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
  //               <thead>
  //                 <tr style="background-color: #f3f4f6;">
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">‚Ññ —Å—á–µ—Ç–∞</th>
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">–ü—Ä–æ–µ–∫—Ç</th>
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç</th>
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">–§–∏—Ä–º–∞</th>
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">–°—Ä–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è</th>
  //                   <th style="padding: 12px; border: 1px solid #ddd; text-align: left;">–°—É–º–º–∞</th>
  //                 </tr>
  //               </thead>
  //               <tbody>
  //                 ${documentList}
  //               </tbody>
  //             </table>
              
  //             <div style="background-color: #fef2f2; border: 1px solid #fecaca; padding: 16px; border-radius: 4px; margin: 20px 0;">
  //               <p style="margin: 0; color: #dc2626;"><strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é.</p>
  //             </div>
  //           </div>
  //               `,
  //       };

  //       try {
  //         await $fetch("/api/mailer/send-mail", {
  //           method: "POST",
  //           body: { mailOptions },
  //         });
  //         await prisma.primaryDocument.updateMany({
  //           where: {
  //             id: {
  //               in: managerData.documents.map((doc) => doc.id),
  //             },
  //           },
  //           data: {
  //             isEmailed: true,
  //           },
  //         });

  //         console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É ${managerData.manager.full_name} (${email})`);
  //       } catch (error) {
  //         console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –º–µ–Ω–µ–¥–∂–µ—Ä—É ${managerData.manager.full_name}:`, error);
  //       }
  //     }

  //     console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${Object.keys(documentsByManager).length} –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º`);
  //   } catch (error) {
  //     console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ü–î: ", error);
  //   }
  // };

  // const runTrackingForAllBases = async () => {
  //   for (const baseName of BASES_TO_TRACK) {
  //     await trackPayments(baseName.apiName);
  //     await trackInvoices(baseName.apiName);
  //   }
  // };

  // await runTrackingForAllBases();
  // if (process.env.NODE_ENV === "deployment") {
  //   await getCounterPartiesFromAllBases();
  // }

  // setInterval(runTrackingForAllBases, 1000 * 60 * 30);
  // setInterval(getCounterPartiesFromAllBases, 1000 * 60 * 60 * 1);
  // setInterval(trackPrimaryDocuments, 1000 * 60 * 60 * 3);
});
